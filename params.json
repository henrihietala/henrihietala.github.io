{"name":"henrihietala.github.io","tagline":".NET / AngularJS developer blog","body":"## How to deploy Azure Cloud Services using Octopus Deploy\r\nI am developing an ASP.NET MVC application which consists of two Azure Cloud Services, **web role** and **worker role** (two different solutions).\r\n\r\nThe Continuous Integration part is handled with JetBrains **TeamCity** and **Octopus Deploy**. Those are some pretty neat tools but not so well documented in terms of Azure Cloud Service deployment.\r\n\r\n### TeamCity to Octopus\r\n\r\n* Install OctoPack NuGet to your WebRole/WebWorker project. TeamCity has an option to automatically create OctoPacks of projects that have the [OctoPack NuGet](https://www.nuget.org/packages/OctoPack/) installed. Make sure you turn that on.\r\n\r\n```\r\nPM > Install-Package OctoPack\r\n```\r\n\r\n\r\n* Create a .nuspec file to your WebRole/WebWorker project. A .nuspec file is a manifest that uses XML to describe your package.\r\n\r\n* Publish packages to Octopus using TeamCity\r\n\r\n### Octopus to Azure deployment\r\n\r\nFirst you should create a step template that has a couple of parameters. This is handy if you need to deploy more than one Cloud Service using the same Azure Subscription Id, Storage Account etc. If you need to deploy only one cloud service, don't bother doing a step template but just a normal \"Deploy to Azure\" step in your process.\r\n\r\nAdd Custom PowerShell script to the template. This will allow you to execute custom PS scripts in three different phases of your deployment process: Pre-Deploy, Deployment, Post-Deploy.\r\n\r\nYou are interested in executing custom PowerShell script in **Deployment** phase. This will be executed after your .config transformations (connectionString, appSettings..). The script you wan't to execute will package your project into a Azure Cloud Service **.cspkg** package that can be deployed to Azure. Octopus will automatically find the .cspkg file so all you need to worry about is generating it (no matter where).\r\n\r\nGo to your Script Modules and add a module that contains the following function:\r\n\r\n```\r\nFunction generatePackage() {\r\n  <# I will add the script later on. #>\r\n}\r\n```\r\n\r\nYou can enable the script module for your Octopus Project by clicking the \"Configure script modules for this project\" link in the project page.\r\n\r\nAfter you have added and enabled the script module, you can call its functions in your Deployment Step template. Call the generatePackage function in Deployment phase like this:\r\n\r\n```\r\ngeneratePackage -workingDirectory ...\r\n```\r\n\r\n_To be continued..._","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}