{"name":"henrihietala.github.io","tagline":".NET / AngularJS developer blog","body":"## How to deploy Azure Cloud Services using Octopus Deploy\r\nI am developing an ASP.NET MVC application which consists of two Azure Cloud Services, **web role** and **worker role** (two different solutions).\r\n\r\nThe Continuous Integration part is handled with JetBrains **TeamCity** and **Octopus Deploy**. Those are some pretty neat tools but not so well documented in terms of Azure Cloud Service deployment.\r\n\r\n### TeamCity to Octopus\r\n\r\n* Install OctoPack NuGet to your WebRole/WorkerRole project. TeamCity has an option to automatically create OctoPacks of projects that have the [OctoPack NuGet](https://www.nuget.org/packages/OctoPack/) installed. Make sure you turn that on.\r\n\r\n```\r\nPM > Install-Package OctoPack\r\n```\r\n\r\n\r\n* Create a .nuspec file to your WebRole/WebWorker project. A .nuspec file is a manifest that uses XML to describe your package. The idea is to copy your service definition and configuration files to the root of your solution for later use in Octopus Deploy.\r\n\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\r\n  <metadata>\r\n    <version>0.00</version>\r\n    <authors>Your Authors</authors>\r\n    <owners>Your Company</owners>\r\n    <id>Your.ProjectId</id>\r\n    <title>Azure Deployment Package</title>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Azure Cloud Service</description>\r\n    <copyright>Your Company 2014</copyright>\r\n  </metadata>\r\n  <files>\r\n    <!-- Add the files (.cscfg, .csdef) from your Azure CS project to the root of your solution  -->\r\n    <file src=\"..\\YourAzureCloudProjectName\\*.*\" />\r\n    <!-- Add the files .wadcfg file to the root to get the diagnostics working  -->\r\n    <file src=\"..\\YourAzureCloudProjectName\\YourRoleNameContent\\*.*\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\n\r\n* Add the following line to your role's .csproj inside the `<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \"></PropertyGroup>` block: (This will copy all the files in your solution to the octopacked nuget file transferred to Octopus Deploy)\r\n\r\n```\r\n<OctoPackEnforceAddingFiles>True</OctoPackEnforceAddingFiles>\r\n```\r\n\r\n\r\n* Publish packages to Octopus using TeamCity\r\n\r\n### Octopus to Azure deployment\r\n\r\n**Script module**\r\n\r\nGo to your Script Modules and add a module that contains the following function:\r\n\r\n```\r\n<# ############################ Create CSPKG file ############################ #>\r\n<# PARAMETERS:\r\n1. workingDirectory: Specify the path of the Visual Studio Solution\r\n2. webProjectName: Specify WebRole Project Name in the Visual Studio Solution\r\n3. cloudProjectName: Specify Cloud Service Project name of the Visual Studio Solution\r\n4. workerRoleAssembly: Specify worker role assembly name (dll) if you wan't to package a worker role cloud service.\r\n#>\r\nFunction generatePackage($workingDirectory, $projectName, $cloudProjectName, $workerRoleAssembly)\r\n{\r\n  Write-Host \"workingDirectory: \" $workingDirectory\r\n  Write-Host \"projectName: \" $projectName\r\n  Write-Host \"cloudProjectName: \" $cloudProjectName\r\n  Write-Host \"workerRoleAssembly: \" $workerRoleAssembly\r\n  \r\n  # Declaration\r\n  $cspack = 'C:\\Program Files\\Microsoft SDKs\\Azure\\.NET SDK\\v2.4\\bin\\cspack.exe'\r\n  $solutionDir = [string]::Format(\"{0}\", $workingDirectory)\r\n  $webDir = $solutionDir\r\n  $packageOutDir = [string]::Format(\"{0}\\{1}\\{2}\", $solutionDir, $cloudProjectName, \"bin\\Release\\app.publish\")\r\n  $rolePropertyFile = [string]::Format(\"{0}\\{1}\\{2}\", $solutionDir, $cloudProjectName, \"roleproperties.txt\")\r\n\r\n  # Create Role Properties File â€“ This property file specifies the .Net framework against which webrole is going to run.\r\n  New-Item $rolePropertyFile -Type file -Force -Value \"TargetFrameWorkVersion=v4.5\" | Out-Null\r\n  New-Item $packageOutDir -Type directory -Force | Out-Null\r\n\r\n  # CSPack command Definition\r\n  $serviceDefinitionPath = \"ServiceDefinition.csdef\"\r\n  $serviceConfigurationPath = \"ServiceConfiguration.Cloud.cscfg\"\r\n  \r\n  # Check that $workerRoleAssembly ends with '.dll'\r\n  if($workerRoleAssembly.EndsWith(\".dll\")) { \r\n    Write-Host \"Worker Role Assembly provided\"\r\n    $serviceRole = [string]::Format(\"/role:{0};{1};{2}\", $projectName, $webDir, $workerRoleAssembly) \r\n  } else {\r\n    $serviceRole = [string]::Format(\"/role:{0};{1}\", $projectName, $webDir)\r\n  }\r\n  $rolePropertiesFile = [string]::Format(\"/rolePropertiesFile:{0};{1}\", $projectName, $rolePropertyFile)\r\n  $sites = [string]::Format(\"/sites:{0};Web;{1}\", $projectName, $webDir)\r\n  $packageOutput = [string]::Format(\"/out:{0}\\{1}.cspkg\", $packageOutDir, $cloudProjectName)\r\n\r\n  # Build CSPKG file\r\n  & $cspack $serviceDefinitionPath $serviceRole $rolePropertiesFile $sites $packageOutput /useCtpPackageFormat | Out-Null\r\n\r\n  # Copy configuration file\r\n  Copy-Item $serviceConfigurationPath $packageOutDir\r\n\r\n  # Remove Role Properties File\r\n  Remove-Item -Path $rolePropertyFile -Force | Out-Null\r\n}\r\n```\r\n\r\nThe script takes 4 arguments:\r\n\r\n1. Working directory. You can use `(Get-Item -Path \".\\\" -Verbose).FullName` to get the current execution path. This works for most of the cases with Azure Cloud Services.\r\n2. Project name. This is the \"role project\"'s name.\r\n3. Cloud project name. This is the cloud project name in your solution that contains the cscfg and csdef files.\r\n4. Worker role assembly [**OPTIONAL**]. Provide the worker role assembly name (e.g. WorkerRole.dll) if you wan't to package a worker role cloud service. Cspack.exe takes additional parameter for /role if your project is a worker role.\r\n\r\nYou can enable the script module for your Octopus Project by clicking the \"Configure script modules for this project\" link in the project page.\r\n\r\n**Step template**\r\n\r\nOk, now you should create a step template (choose \"Deploy to Windows Azure\" as template) that has a couple of parameters. This is handy if you need to deploy more than one Cloud Service using the same Azure Subscription Id, Storage Account etc. If you need to deploy only one cloud service, don't bother doing a step template but just a normal \"Deploy to Azure\" step in your process.\r\n\r\n![Octopus Deploy: Step template parameters](http://henrihietala.github.io/images/Octopus_step_template_parameters.jpg)\r\n\r\nPrefill the step template form inherited from \"Deploy to Windows Azure\" template with your Azure info.\r\n\r\n![Octopus Deploy: Step template form data](http://henrihietala.github.io/images/Octopus_step_template_data.jpg)\r\n\r\nI've filled the form with variables that I have specified in my project's variables.\r\n\r\nThen enable \"Custom PowerShell scripts\" for the template. This will allow you to execute custom PS scripts in three different phases of your deployment process: Pre-Deploy, Deployment, Post-Deploy.\r\n\r\n![Octopus Deploy: Step template features](http://henrihietala.github.io/images/Octopus_step_template_configure_features.jpg)\r\n\r\nYou are interested in executing a custom PowerShell script in **Deployment** phase. This will be executed after your .config transformations (connectionString, appSettings..). The script you wan't to execute will package your project into a Azure Cloud Service **.cspkg** package that can be deployed to Azure. Octopus will automatically find the .cspkg file so all you need to worry about is generating it (no matter where).\r\n\r\nAfter you have added and enabled the script module, you can call its functions in your deployment step template. Call the generatePackage function in deployment phase like this:\r\n\r\n```\r\ngeneratePackage -workingDirectory (Get-Item -Path \".\\\" -Verbose).FullName -webProjectName \"#{WebProjectName}\" -cloudProjectName \"#{CloudProjectName}\" -workerRoleAssembly \"#{WorkerRoleAssembly}\"\r\n```\r\n\r\n\r\nNotice that I'm using argument values as variables. Those variables are actually the step templates parameters.\r\n\r\nEnable \"**Replace appSettings and connectionString entries in any .config files**\" and \"**Automatically run configuration transformation files**\" in step template's settings.\r\n\r\n**Create the deployment steps**\r\n\r\nNow you are ready to make use of the step template. Just add a new step in your project process that uses your step template.","google":"UA-55997809-1","note":"Don't delete this file! It's used internally to help with page regeneration."}